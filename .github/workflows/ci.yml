name: CI

on:
  workflow_dispatch:

jobs:
  macos-build-and-test:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: install dependencies
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          brew install llvm@20
          brew install cmake
          brew install ninja
          brew install vcpkg
      - name: install package manager and libraries
        run: |
          ./vcpkg/bootstrap-vcpkg.sh
          ./vcpkg/vcpkg install
      - name: configure and build project
        run: |
          LLVM_VERSION=$(/opt/homebrew/opt/llvm/bin/llvm-config --version)
          cmake -DCMAKE_C_COMPILER=/opt/homebrew/Cellar/llvm/${LLVM_VERSION}/bin/clang -DCMAKE_CXX_COMPILER=/opt/homebrew/Cellar/llvm/${LLVM_VERSION}/bin/clang++ --preset VcpkgDebug
          cmake --build build/debug
  ubuntu-build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: install system dependencies
        run: |
          # common stuff
          sudo apt-get update && sudo apt-get install -y cmake build-essential ninja-build git curl zip unzip tar
          # clang
          sudo apt-get update && sudo apt-get install -y wget gnupg software-properties-common lsb-release
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add - \
            && sudo add-apt-repository "deb http://apt.llvm.org/$(lsb_release -cs)/ llvm-toolchain-$(lsb_release -cs)-20 main" \
            && sudo apt-get update
          sudo apt-get install -y clang-20 lld-20 llvm-20-tools llvm-20-dev
          # glfw dependencies
          sudo apt-get install -y libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev pkg-config
          sudo rm -rf /var/lib/apt/lists/*
      - name: install package manager and libraries
        run: |
          ./vcpkg/bootstrap-vcpkg.sh
          ./vcpkg/vcpkg install
      - name: configure and build project
        run: |
          cmake -DCMAKE_C_COMPILER=/usr/bin/clang-20 -DCMAKE_CXX_COMPILER=/usr/bin/clang++-20 --preset VcpkgDebug
          cmake --build build/debug

# name: CI

# on:
#   push:
#     branches: [ main, develop ]
#   pull_request:
#     branches: [ main, develop ]
#   workflow_dispatch:

# env:
#   VCPKG_BINARY_SOURCES: "clear;nuget,GitHub,readwrite"
#   VCPKG_NUGET_REPOSITORY: https://github.com/actions/vcpkg-cache

# jobs:
#   build-and-test:
#     strategy:
#       matrix:
#         os: [ubuntu-latest, windows-latest, macos-latest]

#     runs-on: ${{ matrix.os }}

#     steps:
#     - name: Checkout
#       uses: actions/checkout@v4
#       with:
#         submodules: recursive

#     - name: Install dependencies (Ubuntu)
#       if: matrix.os == 'ubuntu-latest'
#       run: |
#         chmod +x install_dependencies.sh
#         ./install_dependencies.sh

#     - name: Setup vcpkg
#       uses: lukka/run-vcpkg@v11

#     - name: Setup CMake
#       uses: jwlawson/actions-setup-cmake@v1.13
#       with:
#         cmake-version: '3.28.0'

#     - name: Setup C++ compiler (Ubuntu)
#       if: matrix.os == 'ubuntu-latest'
#       run: |
#         sudo apt-get update
#         sudo apt-get install -y clang-16
#         echo "CC=clang-16" >> $GITHUB_ENV
#         echo "CXX=clang++-16" >> $GITHUB_ENV

#     - name: Setup C++ compiler (macOS)
#       if: matrix.os == 'macos-latest'
#       run: |
#         echo "CC=clang" >> $GITHUB_ENV
#         echo "CXX=clang++" >> $GITHUB_ENV

#     - name: Configure CMake
#       run: cmake --preset VcpkgDebug

#     - name: Build
#       run: cmake --build build/debug --config Debug --parallel

#     - name: Test
#       run: cmake --build build/debug --config Debug --target test_exe

#     - name: Run tests
#       run: |
#         if [ "${{ matrix.os }}" = "windows-latest" ]; then
#           ./build/debug/test_exe.exe
#         else
#           ./build/debug/test_exe
#         fi

#     - name: Upload test results
#       if: always()
#       uses: actions/upload-artifact@v4
#       with:
#         name: test-results-${{ matrix.os }}-clang
#         path: |
#           logs/
#           build/Testing/
#         retention-days: 7

#   build-debug:
#     runs-on: ubuntu-latest
    
#     steps:
#     - name: Checkout
#       uses: actions/checkout@v4
#       with:
#         submodules: recursive

#     - name: Install dependencies
#       run: |
#         chmod +x install_dependencies.sh
#         ./install_dependencies.sh

#     - name: Setup vcpkg
#       uses: lukka/run-vcpkg@v11

#     - name: Setup CMake
#       uses: jwlawson/actions-setup-cmake@v1.13
#       with:
#         cmake-version: '3.28.0'

#     - name: Configure CMake (Debug)
#       run: cmake --preset VcpkgDebug

#     - name: Build (Debug)
#       run: cmake --build build/debug --config Debug --parallel

#     - name: Test (Debug)
#       run: cmake --build build/debug --config Debug --target test_exe

#     - name: Run tests (Debug)
#       run: ./build/debug/test_exe

#   code-quality:
#     runs-on: ubuntu-latest
    
#     steps:
#     - name: Checkout
#       uses: actions/checkout@v4
#       with:
#         submodules: recursive

#     - name: Install dependencies
#       run: |
#         chmod +x install_dependencies.sh
#         ./install_dependencies.sh

#     - name: Setup vcpkg
#       uses: lukka/run-vcpkg@v11

#     - name: Setup CMake
#       uses: jwlawson/actions-setup-cmake@v1.13
#       with:
#         cmake-version: '3.28.0'

#     - name: Configure CMake with sanitizers
#       run: |
#         cmake --preset VcpkgDebug \
#           -DCMAKE_CXX_FLAGS="-fsanitize=address,undefined -fno-omit-frame-pointer" \
#           -DCMAKE_C_FLAGS="-fsanitize=address,undefined -fno-omit-frame-pointer" \
#           -DCMAKE_EXE_LINKER_FLAGS="-fsanitize=address,undefined"

#     - name: Build with sanitizers
#       run: cmake --build build/debug --config Debug --parallel

#     - name: Test with sanitizers
#       run: cmake --build build/debug --config Debug --target test_exe

#     - name: Run tests with sanitizers
#       run: ./build/debug/test_exe 